<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test page 1</title>
    <link href="/83152bb082b3/"/>
    <url>/83152bb082b3/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-1-Exponent-by-iteration-r-n———-r-nWrite-an-iterative-function-lt-a-style-quot-color-ff5252cc-quot-gt-iterPower-base-exp-that-calculates-the-exponential-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-simply-using-successive-multiplication-For-example-lt-a-style-quot-color-ff5252cc-quot-gt-iterPower-base-exp-should-compute-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-multiplying-lt-a-style-quot-color-ff5252cc-quot-gt-base-times-itself-lt-a-style-quot-color-ff5252cc-quot-gt-exp-times-Write-such-a-function-below-r-n-r-nThis-function-should-take-in-two-values-lt-a-style-quot-color-ff5252cc-quot-gt-base-can-be-a-float-or-an-integer-lt-a-style-quot-color-ff5252cc-quot-gt-exp-will-be-an-integer-≥-0-It-should-return-one-numerical-value-Your-code-must-be-iterative-use-of-the-lt-a-style-quot-color-ff5252cc-quot-gt-operator-is-not-allowed-r-n-r-n-Answer-r-n———-r-npython-r-ndef-iterPower-base-exp-r-n-result-1-r-n-while-exp-gt-0-r-n-result-base-r-n-exp-1-r-n-return-result-r-n-r-n———-r-n-Problem-2-Exponent-by-recurse-r-n———-r-nIn-Problem-1-we-computed-an-exponential-by-iteratively-executing-successive-multiplications-We-can-use-the-same-idea-but-in-a-recursive-function-r-n-r-nWrite-a-function-lt-a-style-quot-color-ff5252cc-quot-gt-recurPower-base-exp-which-computes-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-recursively-calling-itself-to-solve-a-smaller-version-of-the-same-problem-and-then-multiplying-the-result-by-lt-a-style-quot-color-ff5252cc-quot-gt-base-to-solve-the-initial-problem-r-n-r-nThis-function-should-take-in-two-values-lt-a-style-quot-color-ff5252cc-quot-gt-base-can-be-a-float-or-an-integer-lt-a-style-quot-color-ff5252cc-quot-gt-exp-will-be-an-integer-≥0-It-should-return-one-numerical-value-Your-code-must-be-recursive-use-of-the-lt-a-style-quot-color-ff5252cc-quot-gt-operator-or-looping-constructs-is-not-allowed-r-n-r-n-Answer-r-n———-r-npython-r-ndef-recurPower-base-exp-r-n-result-1-r-n-if-exp-0-r-n-return-result-r-n-return-base-recurPower-base-exp-1-r-n-r-n———-r-n-Problem-3-The-greatest-common-divisor-1-r-n———-r-nThe-greatest-common-divisor-of-two-positive-integers-is-the-largest-integer-that-divides-each-of-them-without-remainder-r-n-r-nFor-example-r-nbash-r-ngcd-2-12-2-r-ngcd-6-12-6-r-ngcd-9-12-3-r-ngcd-17-12-1-r-n-r-n———-r-nWrite-an-iterative-function-lt-a-style-quot-color-ff5252cc-quot-gt-gcdIter-a-b-that-implements-this-idea-One-easy-way-to-do-this-is-to-begin-with-a-test-value-equal-to-the-smaller-of-the-two-input-arguments-and-iteratively-reduce-this-test-value-by-1-until-you-either-reach-a-case-where-the-test-divides-both-lt-a-style-quot-color-ff5252cc-quot-gt-a-and-lt-a-style-quot-color-ff5252cc-quot-gt-b-without-remainder-or-you-reach-1-r-n-r-n-Answer-r-n———-r-npython-r-ndef-recurPowerNew-base-exp-r-n-if-exp-lt-0-r-n-return-1-r-n-elif-exp-2-0-r-n-return-recurPowerNew-base-base-exp-2-r-n-return-base-recurPowerNew-base-exp-1-r-n-r-n———-r-n-Problem-4-The-greatest-common-divisor-2-r-n———-r-nThe-greatest-common-divisor-of-two-positive-integers-is-the-largest-integer-that-divides-each-of-them-without-remainder-r-n-r-nFor-example-r-nbash-r-ngcd-2-12-2-r-ngcd-6-12-6-r-ngcd-9-12-3-r-ngcd-17-12-1-r-n-r-n———-r-nA-clever-mathematical-trick-due-to-Euclid-makes-it-easy-to-find-greatest-common-divisors-Suppose-that-lt-a-style-quot-color-ff5252cc-quot-gt-a-and-lt-a-style-quot-color-ff5252cc-quot-gt-b-are-two-positive-integers-r-n-r-n-If-lt-a-style-quot-color-ff5252cc-quot-gt-b-0-then-the-answer-is-lt-a-style-quot-color-ff5252cc-quot-gt-a-r-n-Otherwise-lt-a-style-quot-color-ff5252cc-quot-gt-gcd-a-b-is-the-same-as-lt-a-style-quot-color-ff5252cc-quot-gt-gcd-b-a-b-r-n-r-nWrite-a-function-lt-a-style-quot-color-ff5252cc-quot-gt-gcdRecur-a-b-that-implements-this-idea-recursively-This-function-takes-in-two-positive-integers-and-returns-one-integer-r-n-r-n-Answer-r-n———-r-npython-r-ndef-gcdIter-a-b-r-n-result-min-a-b-r-n-while-a-result-0-or-b-result-0-r-n-result-1-r-n-return-result-r-n-r-n———"><a href="#Problem-1-Exponent-by-iteration-r-n———-r-nWrite-an-iterative-function-lt-a-style-quot-color-ff5252cc-quot-gt-iterPower-base-exp-that-calculates-the-exponential-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-simply-using-successive-multiplication-For-example-lt-a-style-quot-color-ff5252cc-quot-gt-iterPower-base-exp-should-compute-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-multiplying-lt-a-style-quot-color-ff5252cc-quot-gt-base-times-itself-lt-a-style-quot-color-ff5252cc-quot-gt-exp-times-Write-such-a-function-below-r-n-r-nThis-function-should-take-in-two-values-lt-a-style-quot-color-ff5252cc-quot-gt-base-can-be-a-float-or-an-integer-lt-a-style-quot-color-ff5252cc-quot-gt-exp-will-be-an-integer-≥-0-It-should-return-one-numerical-value-Your-code-must-be-iterative-use-of-the-lt-a-style-quot-color-ff5252cc-quot-gt-operator-is-not-allowed-r-n-r-n-Answer-r-n———-r-npython-r-ndef-iterPower-base-exp-r-n-result-1-r-n-while-exp-gt-0-r-n-result-base-r-n-exp-1-r-n-return-result-r-n-r-n———-r-n-Problem-2-Exponent-by-recurse-r-n———-r-nIn-Problem-1-we-computed-an-exponential-by-iteratively-executing-successive-multiplications-We-can-use-the-same-idea-but-in-a-recursive-function-r-n-r-nWrite-a-function-lt-a-style-quot-color-ff5252cc-quot-gt-recurPower-base-exp-which-computes-lt-a-style-quot-color-ff5252cc-quot-gt-baseexp-by-recursively-calling-itself-to-solve-a-smaller-version-of-the-same-problem-and-then-multiplying-the-result-by-lt-a-style-quot-color-ff5252cc-quot-gt-base-to-solve-the-initial-problem-r-n-r-nThis-function-should-take-in-two-values-lt-a-style-quot-color-ff5252cc-quot-gt-base-can-be-a-float-or-an-integer-lt-a-style-quot-color-ff5252cc-quot-gt-exp-will-be-an-integer-≥0-It-should-return-one-numerical-value-Your-code-must-be-recursive-use-of-the-lt-a-style-quot-color-ff5252cc-quot-gt-operator-or-looping-constructs-is-not-allowed-r-n-r-n-Answer-r-n———-r-npython-r-ndef-recurPower-base-exp-r-n-result-1-r-n-if-exp-0-r-n-return-result-r-n-return-base-recurPower-base-exp-1-r-n-r-n———-r-n-Problem-3-The-greatest-common-divisor-1-r-n———-r-nThe-greatest-common-divisor-of-two-positive-integers-is-the-largest-integer-that-divides-each-of-them-without-remainder-r-n-r-nFor-example-r-nbash-r-ngcd-2-12-2-r-ngcd-6-12-6-r-ngcd-9-12-3-r-ngcd-17-12-1-r-n-r-n———-r-nWrite-an-iterative-function-lt-a-style-quot-color-ff5252cc-quot-gt-gcdIter-a-b-that-implements-this-idea-One-easy-way-to-do-this-is-to-begin-with-a-test-value-equal-to-the-smaller-of-the-two-input-arguments-and-iteratively-reduce-this-test-value-by-1-until-you-either-reach-a-case-where-the-test-divides-both-lt-a-style-quot-color-ff5252cc-quot-gt-a-and-lt-a-style-quot-color-ff5252cc-quot-gt-b-without-remainder-or-you-reach-1-r-n-r-n-Answer-r-n———-r-npython-r-ndef-recurPowerNew-base-exp-r-n-if-exp-lt-0-r-n-return-1-r-n-elif-exp-2-0-r-n-return-recurPowerNew-base-base-exp-2-r-n-return-base-recurPowerNew-base-exp-1-r-n-r-n———-r-n-Problem-4-The-greatest-common-divisor-2-r-n———-r-nThe-greatest-common-divisor-of-two-positive-integers-is-the-largest-integer-that-divides-each-of-them-without-remainder-r-n-r-nFor-example-r-nbash-r-ngcd-2-12-2-r-ngcd-6-12-6-r-ngcd-9-12-3-r-ngcd-17-12-1-r-n-r-n———-r-nA-clever-mathematical-trick-due-to-Euclid-makes-it-easy-to-find-greatest-common-divisors-Suppose-that-lt-a-style-quot-color-ff5252cc-quot-gt-a-and-lt-a-style-quot-color-ff5252cc-quot-gt-b-are-two-positive-integers-r-n-r-n-If-lt-a-style-quot-color-ff5252cc-quot-gt-b-0-then-the-answer-is-lt-a-style-quot-color-ff5252cc-quot-gt-a-r-n-Otherwise-lt-a-style-quot-color-ff5252cc-quot-gt-gcd-a-b-is-the-same-as-lt-a-style-quot-color-ff5252cc-quot-gt-gcd-b-a-b-r-n-r-nWrite-a-function-lt-a-style-quot-color-ff5252cc-quot-gt-gcdRecur-a-b-that-implements-this-idea-recursively-This-function-takes-in-two-positive-integers-and-returns-one-integer-r-n-r-n-Answer-r-n———-r-npython-r-ndef-gcdIter-a-b-r-n-result-min-a-b-r-n-while-a-result-0-or-b-result-0-r-n-result-1-r-n-return-result-r-n-r-n———" class="headerlink" title="Problem 1. Exponent by iteration ##\r\n———-\r\nWrite an iterative function &lt;a style=&quot;color:#ff5252cc&quot;&gt;iterPower(base, exp) that calculates the exponential &lt;a style=&quot;color:#ff5252cc&quot;&gt;baseexp by simply using successive multiplication. For example, &lt;a style=&quot;color:#ff5252cc&quot;&gt;iterPower(base, exp) should compute &lt;a style=&quot;color:#ff5252cc&quot;&gt;baseexp by multiplying &lt;a style=&quot;color:#ff5252cc&quot;&gt;base times itself &lt;a style=&quot;color:#ff5252cc&quot;&gt;exp times. Write such a function below.\r\n\r\nThis function should take in two values - &lt;a style=&quot;color:#ff5252cc&quot;&gt;base can be a float or an integer; &lt;a style=&quot;color:#ff5252cc&quot;&gt;exp will be an integer ≥ 0. It should return one numerical value. Your code must be iterative - use of the &lt;a style=&quot;color:#ff5252cc&quot;&gt; operator is not allowed.\r\n\r\n## Answer ##\r\n———-\r\npython\r\ndef iterPower(base, exp):\r\n    result = 1\r\n    while exp &gt; 0:\r\n        result *= base\r\n        exp -= 1\r\n    return result\r\n\r\n———-\r\n## Problem 2. Exponent by recurse ##\r\n———-\r\nIn Problem 1, we computed an exponential by iteratively executing successive multiplications. We can use the same idea, but in a recursive function.\r\n\r\nWrite a function **&lt;a style=&quot;color:#ff5252cc&quot;&gt;recurPower(base, exp) which computes &lt;a style=&quot;color:#ff5252cc&quot;&gt;baseexp by recursively calling itself to solve a smaller version of the same problem, and then multiplying the result by &lt;a style=&quot;color:#ff5252cc&quot;&gt;base to solve the initial problem.\r\n\r\nThis function should take in two values - &lt;a style=&quot;color:#ff5252cc&quot;&gt;base can be a float or an integer; &lt;a style=&quot;color:#ff5252cc&quot;&gt;exp will be an integer ≥0. It should return one numerical value. Your code must be recursive - use of the &lt;a style=&quot;color:#ff5252cc&quot;&gt; operator or looping constructs is not allowed.\r\n\r\n## Answer ##\r\n———-\r\npython\r\ndef recurPower(base, exp):\r\n    result = 1\r\n    if exp == 0:\r\n        return result\r\n    return base*recurPower(base, exp-1)\r\n\r\n———-\r\n## Problem 3. The greatest common divisor(1) ##\r\n———-\r\nThe greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. \r\n\r\nFor example:\r\nbash\r\ngcd( 2, 12) = 2\r\ngcd( 6, 12) = 6\r\ngcd( 9, 12) = 3\r\ngcd(17, 12) = 1\r\n\r\n———-\r\nWrite an iterative function, **&lt;a style=&quot;color:#ff5252cc&quot;&gt;gcdIter(a, b), that implements this idea. One easy way to do this is to begin with a test value equal to the smaller of the two input arguments, and iteratively reduce this test value by 1 until you either reach a case where the test divides both &lt;a style=&quot;color:#ff5252cc&quot;&gt;a and &lt;a style=&quot;color:#ff5252cc&quot;&gt;b without remainder, or you reach 1.\r\n\r\n## Answer ##\r\n———-\r\npython\r\ndef recurPowerNew(base, exp):\r\n    if exp &lt;= 0:\r\n        return 1\r\n    elif exp % 2 == 0:\r\n        return recurPowerNew(base*base, exp/2)\r\n    return base * recurPowerNew(base, exp - 1)\r\n\r\n———-\r\n## Problem 4. The greatest common divisor(2) ##\r\n———-\r\nThe greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. \r\n\r\nFor example:\r\nbash\r\ngcd( 2, 12) = 2\r\ngcd( 6, 12) = 6\r\ngcd( 9, 12) = 3\r\ngcd(17, 12) = 1\r\n\r\n———-\r\nA clever mathematical trick (due to Euclid) makes it easy to find greatest common divisors. Suppose that &lt;a style=&quot;color:#ff5252cc&quot;&gt;a and &lt;a style=&quot;color:#ff5252cc&quot;&gt;b are two positive integers:\r\n\r\n* If &lt;a style=&quot;color:#ff5252cc&quot;&gt;b = 0, then the answer is &lt;a style=&quot;color:#ff5252cc&quot;&gt;a\r\n* Otherwise, &lt;a style=&quot;color:#ff5252cc&quot;&gt;gcd(a, b) is the same as &lt;a style=&quot;color:#ff5252cc&quot;&gt;gcd(b, a % b)\r\n\r\nWrite a function &lt;a style=&quot;color:#ff5252cc&quot;&gt;gcdRecur(a, b) that implements this idea recursively. This function takes in two positive integers and returns one integer.\r\n\r\n## Answer ##\r\n———-\r\npython\r\ndef gcdIter(a,b):\r\n    result = min(a,b)\r\n    while a % result != 0 or b % result != 0:\r\n        result -= 1\r\n    return result\r\n\r\n———-"></a>Problem 1. Exponent by iteration ##\r\n———-\r\nWrite an iterative function <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;iterPower(base, exp)</a></em></strong> that calculates the exponential <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base<sup>exp</sup></a></em></strong> by simply using successive multiplication. For example, <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;iterPower(base, exp)</a></em></strong> should compute <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base<sup>exp</sup></a></em></strong> by multiplying <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base</a></em></strong> times itself <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;exp</a></em></strong> times. Write such a function below.\r\n\r\nThis function should take in two values - <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base</a></em></strong> can be a float or an integer; <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;exp</a></em></strong> will be an integer ≥ 0. It should return one numerical value. Your code must be iterative - use of the &lt;a style=&quot;color:#ff5252cc&quot;&gt;<strong></a> operator is not allowed.\r\n\r\n## Answer ##\r\n———-\r\n<code>python\r\ndef iterPower(base, exp):\r\n    result = 1\r\n    while exp &gt; 0:\r\n        result *= base\r\n        exp -= 1\r\n    return result\r\n</code>\r\n———-\r\n## Problem 2. Exponent by recurse ##\r\n———-\r\nIn Problem 1, we computed an exponential by iteratively executing successive multiplications. We can use the same idea, but in a recursive function.\r\n\r\nWrite a function **<em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;recurPower(base, exp)</a></em></strong> which computes <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base<sup>exp</sup></a></em></strong> by recursively calling itself to solve a smaller version of the same problem, and then multiplying the result by <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base</a></em></strong> to solve the initial problem.\r\n\r\nThis function should take in two values - <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;base</a></em></strong> can be a float or an integer; <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;exp</a></em></strong> will be an integer ≥0. It should return one numerical value. Your code must be recursive - use of the &lt;a style=&quot;color:#ff5252cc&quot;&gt;<strong></a> operator or looping constructs is not allowed.\r\n\r\n## Answer ##\r\n———-\r\n<code>python\r\ndef recurPower(base, exp):\r\n    result = 1\r\n    if exp == 0:\r\n        return result\r\n    return base*recurPower(base, exp-1)\r\n</code>\r\n———-\r\n## Problem 3. The greatest common divisor(1) ##\r\n———-\r\nThe greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. \r\n\r\nFor example:\r\n<code>bash\r\ngcd( 2, 12) = 2\r\ngcd( 6, 12) = 6\r\ngcd( 9, 12) = 3\r\ngcd(17, 12) = 1\r\n</code>\r\n———-\r\nWrite an iterative function, **<em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;gcdIter(a, b)</a></em></strong>, that implements this idea. One easy way to do this is to begin with a test value equal to the smaller of the two input arguments, and iteratively reduce this test value by 1 until you either reach a case where the test divides both <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;a</a></em></strong> and <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;b</a></em></strong> without remainder, or you reach 1.\r\n\r\n## Answer ##\r\n———-\r\n<code>python\r\ndef recurPowerNew(base, exp):\r\n    if exp &lt;= 0:\r\n        return 1\r\n    elif exp % 2 == 0:\r\n        return recurPowerNew(base*base, exp/2)\r\n    return base * recurPowerNew(base, exp - 1)\r\n</code>\r\n———-\r\n## Problem 4. The greatest common divisor(2) ##\r\n———-\r\nThe greatest common divisor of two positive integers is the largest integer that divides each of them without remainder. \r\n\r\nFor example:\r\n<code>bash\r\ngcd( 2, 12) = 2\r\ngcd( 6, 12) = 6\r\ngcd( 9, 12) = 3\r\ngcd(17, 12) = 1\r\n</code>\r\n———-\r\nA clever mathematical trick (due to Euclid) makes it easy to find greatest common divisors. Suppose that <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;a</a></em></strong> and <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;b</a></em></strong> are two positive integers:\r\n\r\n* If <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;b = 0</a></em></strong>, then the answer is <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;a</a></em></strong>\r\n* Otherwise, <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;gcd(a, b)</a></em></strong> is the same as <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;gcd(b, a % b)</a></em></strong>\r\n\r\nWrite a function <strong><em>&lt;a style=&quot;color:#ff5252cc&quot;&gt;gcdRecur(a, b)</a></em></strong> that implements this idea recursively. This function takes in two positive integers and returns one integer.\r\n\r\n## Answer ##\r\n———-\r\n<code>python\r\ndef gcdIter(a,b):\r\n    result = min(a,b)\r\n    while a % result != 0 or b % result != 0:\r\n        result -= 1\r\n    return result\r\n</code>\r\n———-</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/0bd2c82276d3/"/>
    <url>/0bd2c82276d3/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
